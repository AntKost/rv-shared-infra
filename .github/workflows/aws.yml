name: CI/CD Pipeline - Shared Resources

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.0"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Configure AWS Credentials for Terraform
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile rv-terraform
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile rv-terraform

      - name: Get current task definition
        id: get_task_def
        run: |
          MQTT_TASK_DEF_LAST=$(aws ecs list-task-definitions \
            --family-prefix "mqtt" \
            --sort DESC \
            --max-items 1 \
            --query "taskDefinitionArns[0]" \
            --output text)
          echo "mqtt_task_def_last=$MQTT_TASK_DEF_LAST" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_my_ip: ${{ secrets.TF_VAR_my_ip }}
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_my_ip: ${{ secrets.TF_VAR_my_ip }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Generate MQTT AppSpec File and create CodeDeploy Deployment
        if: ${{ steps.apply.outputs.MQTT_TASK_DEF_LAST != steps.apply.outputs.mqtt_task_def_new }}
        run: |
          cat <<EOF > mqtt_appspec.json
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.apply.outputs.mqtt_task_def_new }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "mqtt",
                      "ContainerPort": 1883
                    }
                  }
                }
              }
            ]
          }
          EOF
          aws deploy create-deployment \
            --application-name ${{ steps.apply.outputs.mqtt_codedeploy_app }} \
            --deployment-group-name ${{ steps.apply.outputs.mqtt_codedeploy_deploy_group }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment initiated by GitHub Actions" \
            --revision file://mqtt_appspec.json
